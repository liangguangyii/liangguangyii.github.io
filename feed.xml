<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://liangguangyii.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://liangguangyii.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-02-23T07:11:49+00:00</updated><id>https://liangguangyii.github.io/feed.xml</id><title type="html">blank</title><subtitle>Ho! So many bugs and goblins in my life! </subtitle><entry><title type="html">Notes for gimic</title><link href="https://liangguangyii.github.io/blog/2024/notes-for-gimic/" rel="alternate" type="text/html" title="Notes for gimic"/><published>2024-02-13T21:01:00+00:00</published><updated>2024-02-13T21:01:00+00:00</updated><id>https://liangguangyii.github.io/blog/2024/notes-for-gimic</id><content type="html" xml:base="https://liangguangyii.github.io/blog/2024/notes-for-gimic/"><![CDATA[<p>Basic introduction and usage could be found in <a href="http://sobereva.com/491">Tian Lu’s blog</a>, or <a href="https://github.com/qmcurrents/gimic/tree/master/doc">the document of gimic</a></p> <h2 id="installation">Installation</h2> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./setup <span class="nt">--omp</span>
<span class="nb">cd </span>build
make <span class="nb">install</span>
</code></pre></div></div> <p>If executable file setup runs successfully, then <code class="language-plaintext highlighter-rouge">build</code> directory will be created. And to restart, <code class="language-plaintext highlighter-rouge">build</code> should be removed.</p> <p>And there are some fucking bugs in the python part of source code, in <code class="language-plaintext highlighter-rouge">src/pygimic</code>, for the <code class="language-plaintext highlighter-rouge">connector.pxd</code> and <code class="language-plaintext highlighter-rouge">connector.pyx</code> (the cpython code).</p> <p>The reason has found, which is the duplicate definition of function <code class="language-plaintext highlighter-rouge">GimicConnector</code>. It has already defined in <code class="language-plaintext highlighter-rouge">connector.pyx</code>, and decalared in <code class="language-plaintext highlighter-rouge">connector.pxd</code>, so it’s unnecessary to <code class="language-plaintext highlighter-rouge">cimport</code> in once again from pxd doc.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Generic GIMIC interface
#
# Jonas Juselius &lt;jonas.juselius@uit.no&gt; 2012
#
</span>
<span class="kn">from</span> <span class="n">pygimic.gimic_exceptions</span> <span class="kn">import</span> <span class="n">NotAvailable</span>
<span class="c1">#NO NEEDED!
#from connector cimport GimicConnector
</span>
<span class="n">cdef</span> <span class="k">class</span> <span class="nc">GimicConnector</span><span class="p">:</span>
    <span class="n">cpdef</span> <span class="nf">jvector</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">r</span><span class="p">):</span>
        <span class="k">raise</span> <span class="nc">NotAvailable</span><span class="p">(</span><span class="sh">'</span><span class="s">jvector()</span><span class="sh">'</span><span class="p">)</span>

    <span class="n">cpdef</span> <span class="nf">jtensor</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">r</span><span class="p">):</span>
        <span class="k">raise</span> <span class="nc">NotAvailable</span><span class="p">(</span><span class="sh">'</span><span class="s">jtensor()</span><span class="sh">'</span><span class="p">)</span>

    <span class="n">cpdef</span> <span class="nf">set_property</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">prop</span><span class="p">,</span> <span class="n">val</span><span class="p">):</span>
        <span class="k">pass</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="n">g</span> <span class="o">=</span> <span class="nc">GimicConnector</span><span class="p">()</span>
    <span class="n">g</span><span class="p">.</span><span class="nf">jvector</span><span class="p">((</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>

<span class="c1"># vim:et:ts=4:
</span></code></pre></div></div> <h2 id="usage">Usage</h2> <h3 id="gaussian-output-file">Gaussian output file</h3> <p>There are two cases: closed shell and open shell. Both of them should add the keyword <code class="language-plaintext highlighter-rouge">Int=NoBasisTransform IOp(10/33=2)</code> in NMR(GIAO) calculation, for the information transformation from different software (IOp(10/33=2) to print the perturbed density matrices in the output file).</p> <p>And two files named <code class="language-plaintext highlighter-rouge">Gaussian2gimic.py</code> and <code class="language-plaintext highlighter-rouge">BasisSet.py</code> in <code class="language-plaintext highlighter-rouge">gimic/tools/g092gimic</code> should be used to generated <code class="language-plaintext highlighter-rouge">XDENS</code> and <code class="language-plaintext highlighter-rouge">MOL</code>.</p> <p>For closed shell, fchk files are needed, then <code class="language-plaintext highlighter-rouge">./Gaussian2gimic.py --input=test.fchk</code>.</p> <p>For open shell, log files are needed, so extra keyword <code class="language-plaintext highlighter-rouge">gfprint</code> should be added in the input file, to print the basis set information, then <code class="language-plaintext highlighter-rouge">./Gaussian2gimic.py --input=test.log</code>.</p> <p>And the calculation is proceeded in a cubic box, so the initial orientation of the molecule should be considered, by using <code class="language-plaintext highlighter-rouge">nosymm</code> keyword.</p> <h3 id="cdens-calculation">cdens calculation</h3> <p>Output files:</p> <p><code class="language-plaintext highlighter-rouge">mol.xyz</code>: the coordinates of the molecule</p> <p><code class="language-plaintext highlighter-rouge">grid.xyz</code>: the coordinates of the molecule, together with eight atoms around the molecule, to form a cubic box</p> <p><code class="language-plaintext highlighter-rouge">acid.vti</code>: the grids data of <a href="http://sobereva.com/147">acid function</a>.</p> <p><code class="language-plaintext highlighter-rouge">jmod.vti</code>: the norm of the current density.</p> <p><code class="language-plaintext highlighter-rouge">jvec.vti</code>: the current density vector.</p> <p>To export the data to paraView, cml format file should be used instead of xyz format. And the unit of cml should be in Bohr, while <code class="language-plaintext highlighter-rouge">mol.xyz</code> is in Angstrom. <strong>Then the <code class="language-plaintext highlighter-rouge">mol.xyz</code> should be converted to Bohr, by multiplying 1.889725989, or divided by 0.5291772109.</strong> The script is as follows, openbabel should be installed first:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>obabel <span class="nt">-ixyz</span> mol.xyz <span class="nt">-ocml</span> <span class="nt">-O</span> mol.cml
<span class="nb">awk</span> <span class="s1">'{ {FS="\""}; {OFS="\""};
     if ($1 ~ "&lt;atom id") {
         if ($5 ~ "spinMultiplicity")
             { print $1, $2, $3, $4, $5, $6, $7, $8/0.529177, $9, $10/0.529177, $11, $12/0.529177, $13 }
         else if ($5 ~ "hydrogenCount")
             { print $1, $2, $3, $4, $5, $6, $7, $8/0.529177, $9, $10/0.529177, $11, $12/0.529177, $13 }		 
     	 else  { print $1, $2, $3, $4, $5, $6/0.529177, $7, $8/0.529177, $9, $10/0.529177, $11 }
         }
     else print $0; }'</span> mol.cml <span class="o">&gt;</span> mol-bohr.cml

</code></pre></div></div> <h3 id="integral-calculation">integral calculation</h3> <p>Generate grids perpendicularly to the <code class="language-plaintext highlighter-rouge">bond</code>/<code class="language-plaintext highlighter-rouge">line</code>, then fix its orientation, by using <code class="language-plaintext highlighter-rouge">fixpoint</code>/<code class="language-plaintext highlighter-rouge">fixcoord</code>, all length should be in Bohr.</p> <p>1. <code class="language-plaintext highlighter-rouge">bond = [a, b]</code> + <code class="language-plaintext highlighter-rouge">distance</code> + <code class="language-plaintext highlighter-rouge">fixpoint</code> + <code class="language-plaintext highlighter-rouge">height[-down, up]</code> + <code class="language-plaintext highlighter-rouge">width[-in, out]</code></p> <p>2. <code class="language-plaintext highlighter-rouge">coord1</code> + <code class="language-plaintext highlighter-rouge">coord2</code> + <code class="language-plaintext highlighter-rouge">distance</code> + <code class="language-plaintext highlighter-rouge">fixcoord</code> + <code class="language-plaintext highlighter-rouge">height[-down, up]</code> + <code class="language-plaintext highlighter-rouge">width[-in, out]</code></p> <p>In integral calculation, <code class="language-plaintext highlighter-rouge">bond</code> in <code class="language-plaintext highlighter-rouge">Grid</code> function is used to generate the plane grid. <a href="https://github.com/qmcurrents/gimic/blob/master/doc/grids.rst">The ’bond’ type grids define a plane through a bond, or any other defined vector. The plane is orthogonal to the vector defining the bond.</a> To fix the orientation of the plane(or it will rotate along the bond), <code class="language-plaintext highlighter-rouge">fixpoint</code>/<code class="language-plaintext highlighter-rouge">fixcoord</code> is needed, the line of rectangle should be parallel to the projection of the vector connecting rotation axis of plane and fixpoint onto the plane.</p> <p>Figure following shows the plane grids under parameters:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>calc=integral          # cdens, integral
basis="../MOL"
xdens="../XDENS"
openshell=false
magnet=[0,0,1]

Grid(bond) {
    type=gauss                  # Gauss distribution of grid points
    gauss_order=9               # order for gauss quadrature
   bond=[1,2]                  # Use two atoms to define the direction
#   coord1=[-1.21, 0.699, 0.0] # Use two points to define the direction, Bohr
#   coord2=[-1.21, -0.699, 0.0]
    distance=1.32               # Distance of the plane to the first point, Bohr
#   fixpoint=4
   fixcoord=[1.0, 0.0, 1.0]
    grid_points=[30, 30, 0]     # Number of points on grid (i,j,k)
    height=[-5.0, 5.0]    # Grid size of height relative to grid center
    width=[-2.2, 5.0]     # Grid size of width relative to grid center
}

Advanced {
    lip_order=5      # order of Lagrange Interpolating Polynominals to use
    spherical=off     # don't touch, unless you REALLY know what you are doing
    diamag=on           # turn on/off diamagnetic contributions
    paramag=on          # turn on/off paramagnetic contributions
}
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset=" /assets/img/gimic_plane1-480.webp 480w, /assets/img/gimic_plane1-800.webp 800w, /assets/img/gimic_plane1-1400.webp 1400w, " sizes="95vw" type="image/webp"/> <img src="/assets/img/gimic_plane1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset=" /assets/img/benzene-plane-documentation-480.webp 480w, /assets/img/benzene-plane-documentation-800.webp 800w, /assets/img/benzene-plane-documentation-1400.webp 1400w, " sizes="95vw" type="image/webp"/> <img src="/assets/img/benzene-plane-documentation.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> The plane grids under parameters. </div>]]></content><author><name></name></author><category term="DFT"/><category term="gimic"/><category term="DFT"/><summary type="html"><![CDATA[Basic introduction and usage could be found in Tian Lu’s blog, or the document of gimic]]></summary></entry><entry><title type="html">Notes for DeepLearning</title><link href="https://liangguangyii.github.io/blog/2023/notes-for-deeplearning/" rel="alternate" type="text/html" title="Notes for DeepLearning"/><published>2023-11-22T00:00:00+00:00</published><updated>2023-11-22T00:00:00+00:00</updated><id>https://liangguangyii.github.io/blog/2023/notes-for-deeplearning</id><content type="html" xml:base="https://liangguangyii.github.io/blog/2023/notes-for-deeplearning/"><![CDATA[<h2 id="the-backpropagation-and-frontpropagation">The backpropagation and frontpropagation</h2> <p>Let \([l]\) be the index of layer, \((m)\) denotes the index of training(or testing) samples. A single netural node could be written as:</p> \[z = w^{ \rm{T} } x + b \rightarrow a = g(z)\] <p>Here:</p> <ul> <li> <p>\(x\) is a matrix with \(n_{x} \times m\) dimension, \(m\) is the number of samples and \(n_{x}\) is the number of features.</p> </li> <li> <p>\(w\) is the parameter matrix with \(n_{x} \times 1\) dimension, and \(b\) is the bias with \(1 \times 1\) dimension.</p> </li> <li> <p>\(g\) is the activation function.</p> </li> </ul> <p>Furthermore, for multiple layers, the output of the $l$-th layer could be written as:</p> \[Z^{[l]} = W^{[l]} A^{[l - 1]} + B^{[l]} \rightarrow A^{[l]} = g(Z^{[l]})\] <p>Here:</p> <ul> <li> <p>\(A^{[l]}\) is the output of the \(l\)-th layer, with \(n_{l} \times m\) dimension.</p> </li> <li> <p>\(W^{[l]}\) is the parameter matrix with \(n_{l} \times n_{l - 1}\) dimension, and \(B^{[l]}\) is the bias with \(n_{l} \times 1\) dimension.</p> </li> <li> <p>\(g\) is the activation function.</p> </li> </ul> <p>And for backpropagation, the gradient of the $l$-th layer could be written as:</p> \[\rm{d} Z^{[l]} = \rm{d} A^{[l]} \times g'^{[l]}(Z^{[l]})\] \[\rm{d} W^{[l]} = \frac{1}{m} \rm{d} Z^{[l]} \cdot A^{[l-1] \rm{T}}\] \[\rm{d} B^{[l]} = \frac{1}{m} \sum_{m} \rm{d} Z^{[l]}\] \[\rm{d} A^{[l - 1]} = W^{[l] \rm{T}} \cdot \rm{d} Z^{[l]}\] <p>We use \(\rm{d}\) to denote the partial derivative of the loss function with respect to the variable.</p>]]></content><author><name></name></author><category term="notes"/><category term="Python"/><category term="DeepLearning"/><summary type="html"><![CDATA[The backpropagation and frontpropagation]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://liangguangyii.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://liangguangyii.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://liangguangyii.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[]]></content><author><name></name></author></entry></feed>